---
title: "Web Mapping With Leaflet"
subtitle: "Team Analytics and Beyond"
format: 
  revealjs:
    smaller: true
    slide-number: c/t   
    logo: "https://upload.wikimedia.org/wikipedia/commons/e/e8/Marquette_Golden_Eagles_logo.svg"
date: "`r Sys.Date()`"
author: "**Andrew Hiller, Annie Gibbons, Caroline Kwak, Noah Kaye**"
number-sections: false
from: markdown+emoji
editor: 
  source
---

```{r}
#| label: setup
#| include: false

####################################################
## !!!DO NOT MAKE ANY CHANGE OF THIS CODE CHUNK!!!##
####################################################

# Package names
packages <- c("knitr", "ggplot2", "ggrepel", 
              "tidyverse", "formatR", "dslabs", "janitor", 
              "ggthemes", "plotly", "tidymodels", "kknn")

# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
    install.packages(packages[!installed_packages])
}

# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
```

## Leaflet Package 

- The leaflet package allows users to create interactive maps where you can custom icons, markers, layers, etc. To create a leaflet map all you need is the longitude and latitude of a location or locations. 

. . .

- Advantages of leaflet include its versatility, compatibility, flexibility, exceptional dynamic maps, aesthetic features, ability to create mobile maps while working with shiny() to post interactive maps to websites.

. . . 

- It is used by famous websites like the New York Times and Mapbox for interactive maps.

## How/Why does this package help us do data science?
- This package helps us do data science because it can be easily used to visualize spatial data with a wide range of features such as searching, zooming and switching between layers.

## Usage: Initializing the Window
Initializing creates the window for other functions to add to  

. . .

functions:  

. . .

- leaflet() 

. . . 

- leafletOptions(): sets minZoom and maxZoom  

. . . 

- setView(): sets the center of the map view and the zoom level 

. . .

- fitBounds(): fits the view into the rectangle  

. . .

- clearBounds(): clears the bound, so that the view will be automatically determined by the range of latitude/longitude data in the map layers if provided 

## Creating Maps
Creating the map requires “tiles” that tell Leaflet what type of map to output 

. . .

functions: 

- addTiles(): adding OpenStreetMap base map  

. . .

- addProviderTiles(): adding third-party provided base maps (via plugin) 

. . .

- addWMSTiles(): Web Map Services tiles (via the internet)

## Adding Shapes 
Allows user to put in country, state, counties, etc. shapes in the map to connect to data  

. . .

functions: 

- addPolygons(): add map shapes (countries, states, counties, etc.) 

. . .

- addCircles(): given radius around a point  

. . .

- addRectangles(): 4 given points  

## Adding Colors 
Can help convey more information within the visual 

. . .


functions:  

- colorNumeric(): continuous input, continuous colors 

. . .

- colorBin(), colorQuanitile(): continuous input, discrete colors 

. . .

- colorFactor(): categorical input  

## Adding Markers 
Markers are used to highlight points on the map to add more information to the display 

. . .

functions:  

- addMarker(), addAwesomeMarker(): adding icon marker (default is dropped pin)  

. . .

- makeIcon(), makeAwesomeIcon(): customizing icon markers 

. . .

- iconList(), awesomeIconList(): set of icons with varying parameters 

. . .

- clusterMarkers(), clusterMarkerOptions(): clustering large quantities of markers (when you zoom out they combine into one icon)  

. . .

- addCircleMarkers(): adds circle markers with constant radius 

## Popups and Labels 
Good ways to explain what a marker is or represents, without overcrowding the visual 

. . .

Labels appear when a marker is moused over

. . .

Popups appear when a marker is clicked on  

. . .

functions 

- addPopups(): add popups to map  

. . .

- labelOptions() 

. . .

- addLabelOnlyMarkers(): labels without markers 

## Legend 

Legends explain what some of the markers or colors represent on the map enabling more information to be on visual without overcrowding the page  

. . .

functions 

- addLegend() 

## Layers 
A way to fit more information onto the map without overcrowding 

. . .

functions 

- addLayersControl(): adds box that allows you to control which layers you see 

## Reading Data form Excel
Once we create our data based on the longitude and latitude we can let R read the data. 

. . .

```{r}
#| echo: fenced

library(leaflet)

xl_file <- readxl::read_excel("./data/MU Location Coordinates.xlsx")
xl_file

```

## Turning Data into Map
With the data from excel we use leaflet(), addTiles(), and addMarkers() to make the inital map.
```{r}
#| echo: fenced 

m <- leaflet(data = xl_file) %>%
  addTiles() %>%
  addMarkers(lat = ~Latitude , lng = ~Longitude , popup = ~as.character(Type), label = ~as.character(Location))

m
```

## Changing Color Based on Type 

```{r}
#| echo: fenced 

getColor <- function(xl_file){sapply(xl_file$Type, function(Type) {
    if(Type == "Residence Hall") {
      "red"
    }else if(Type == "University Apartment") {
      "gray"
    }else if(Type == "Administrative") {
      "green"
    }else if(Type == "Academic") {
      "orange"
    }else if(Type == "Recreation") {
      "white"
    }else if(Type == "Religious Institution") {
      "blue"
    }else if(Type == "Parking") {
      "purple"
    }else{
      "cadetblue"
    } })
}

icons <- awesomeIcons(
  icon = 'ios-close',
  iconColor = 'black',
  library = "ion",
  markerColor = getColor(xl_file)
)

```

## slide with new icons
```{r}
leaflet(df.all) |>
  addTiles() |>
  addAwesomeMarkers(lng = ~Longitude, lat = ~Latitude, popup = ~Location, icon=icons, label= ~as.character(xl_file$Type))
```

